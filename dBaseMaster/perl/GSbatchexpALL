#!/usr/bin/perl -wT
#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2008 University of Utah and the Flux Group.
# All rights reserved.
#
# Goran Scuric: GSbatchexp: Major changes to support graphical user experiment interface. 
#               Based on batchexp script. No longer supports NS file
#               Input specification is client generated XML experiment definition file.
#               Also some number of useless options have been removed
use English;
use Getopt::Std;
use POSIX qw(isatty setsid);
use POSIX qw(strftime);
use Errno qw(EDQUOT);
use RPC::XML;

#
# Create an experiment. The experiment is either run immediately, or
# placed into the batch system to be run later. If no NS file is
# supplied, an experiment shell is created (this is currently an admin
# only option).
# 
# Exit codes:
# $status < 0 - Fatal error. Something went wrong we did not expect.
# $status = 0 - Everything okay.
# $status > 0 - Expected error. User not allowed for some reason. 
# 
sub usage()
{
    print(STDERR
	  "Usage: batchexp [-i] [-n] [-f] [-N] [-E description] [-g gid]\n".
	  "                [-S reason] [-L reason] [-a <time>] [-l <time>]\n".
	  "                -p <pid> -e <eid> <xmlfile>\n".
	  "switches and arguments:\n".
	  "-i       - swapin immediately; by default experiment is batched\n".
	  "-f       - preload experiment (do not swapin or queue yet)\n".
	  "-S <str> - Experiment cannot be swapped; must provide reason\n".
	  "-L <str> - Experiment cannot be IDLE swapped; must provide reason\n".
	  "-n       - Do not send idle email (internal option only)\n".
	  "-a <nnn> - Auto swapout nnn minutes after experiment is swapped in\n".
	  "-l <nnn> - Auto swapout nnn minutes after experiment goes idle\n".
	  "-E <str> - A pithy sentence describing your experiment\n".
	  "-p <pid> - The project in which to create the experiment\n".
	  "-g <gid> - The group in which to create the experiment\n".
	  "-e <eid> - The experiment name (unique, alphanumeric, no blanks)\n".
	  "-N       - Suppress most email to the user and testbed-ops\n".
	  "<xmlfile>- XML file <eid.xml> to parse for experiment.\n");
    exit(-1);
}

sub ParseArgs();
sub fatal($;$);

my $optlist = "iE:g:e:p:S:L:a:l:fqt:nzc:bx:y:h:kNXw";	# Enough options?
my $batchmode= 1;
my $frontend = 0;
my $waitmode = 0;
my $lockdown = 0;
my $linktest = 0;	# non-zero means level to run at.
my $savestate= 0;
my $group;
my $xmlfile;
my $repfile;

#
# Configure variables
#
my $TB       = "/usr/testbed";
my $EVENTSYS = 1;
my $TBOPS    = "testbed-ops\@minibed.deterlab.net";
my $TBLOGS   = "testbed-logs\@minibed.deterlab.net";
my $TBDOCBASE = "http://www.minibed.deterlab.net";
my $TBBASE   = "https://www.minibed.deterlab.net";
my $CONTROL  = "users.minibed.deterlab.net";



#
# Testbed Support libraries
#
use lib "/usr/testbed/lib";
use libdb;
use libtestbed;
use libtblog;
use libArchive;
use Experiment;
use User;
use Project;
use Group;

my $parser      = "$TB/libexec/parse-ns";
my $checkquota  = "$TB/sbin/checkquota";

my $errorstat=-1;
my $exptidx;
my $logfile;
my $logname;

# For the END block below.
my $cleaning = 0;
my $justexit = 1;
my $TERMsignaled = 0;

#
# Turn off line buffering on output
#
$| = 1;

#
# Set umask for start/swap. We want other members in the project to be
# able to swap/end experiments, so the log and intermediate files need
# to be 664 since some are opened for append.
#
umask(0002);

#
# Untaint the path
#
# un-taint path
$ENV{'PATH'} = '/bin:/usr/bin:/usr/local/bin';
delete @ENV{'IFS', 'CDPATH', 'ENV', 'BASH_ENV'};

my $eid;
my $pid;
my $gid;
my $description;
my $xmlInFile;
my $swappable    = 1;
my $noswap_reason;
my $idleswap     = 1;
my $idleswaptime = 60 * TBGetSiteVar("idle/threshold");
my $noidleswap_reason;
my $autoswap     = 0;
my $autoswaptime = 10 * 60;
my $idleignore   = 0;
my $exptstate    = EXPTSTATE_NEW();
my $batchstate   = BATCHSTATE_UNLOCKED();
my $now          = localtime();
my $committed    = 0;
my $experiment;
my $copy_experiment;
my $noemail      = 0;

#
# Verify user and get his DB uid and other info for later.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    tbdie("You ($UID) do not exist!");
}
my $user_dbid  = $this_user->dbid();
my $user_uid   = $this_user->uid();
my $user_name  = $this_user->name();
my $user_email = $this_user->email();
my $user_course_pid = $this_user->CourseAcct();

#
# Before doing anything else, check for overquota ... lets not waste
# our time. Make sure user sees the error by exiting with 1.
#
if (system("$checkquota $user_uid") != 0) {
    tberror({cause => 'user', type => 'primary', severity => SEV_ERROR,
	     error => ['over_disk_quota', $CONTROL]},
	    "You are over your disk quota on $CONTROL; ".
	    "please login there and cleanup!");
    exit(1);
}

#
# Parse command arguments.
#
ParseArgs();

#
# Batch jobs get a shorter idle time
#
my $swaptime = $idleswaptime;
if ($batchmode && TBSiteVarExists("idle/batch_threshold")) {
    my $batchidleswaptime = TBGetSiteVar("idle/batch_threshold");
    if ($swaptime > $batchidleswaptime) {
	$swaptime = $batchidleswaptime;
    }
}

#
# Grab me a secret key for accessing tar/rpm files via the web interface.
# Grab another secret key for the event system HMACs.
#
my $webkey   = TBGenSecretKey();
my $eventkey = TBGenSecretKey();

#
# In wait mode, block SIGINT until we spin off the background process.
#
if ($waitmode) {
    $SIG{QUIT} = 'IGNORE';
    $SIG{TERM} = 'IGNORE';
    $SIG{INT}  = 'IGNORE';
}

#
# Create an arg array of parameters.
#
my %args = ();

$args{'expt_head_uid'}	   = $user_uid;
$args{'expt_swap_uid'}	   = $user_uid;
$args{'creator_idx'}	   = $user_dbid;
$args{'swapper_idx'}	   = $user_dbid;
$args{'state'}		   = $exptstate;
$args{'swappable'}	   = $swappable;
$args{'idleswap'}	   = $idleswap;
$args{'idleswap_timeout'}  = $swaptime;
$args{'autoswap'}	   = $autoswap;
$args{'autoswap_timeout'}  = $autoswaptime;
$args{'idle_ignore'}	   = $idleignore;
$args{'keyhash'}	   = $webkey;
$args{'lockdown'}	   = $lockdown;
$args{'eventkey'}	   = $eventkey;
$args{'batchmode'}	   = $batchmode;
$args{'batchstate'}	   = $batchstate;
$args{'linktest_level'}    = $linktest;
$args{'savedisk'}	   = $savestate;
$args{'instance_idx'}	   = 0;
# These are special; the library will DBQuote them. 
$args{'expt_name'}	   = $description;
$args{'noswap_reason'}	   = $noswap_reason;
$args{'noidleswap_reason'} = $noidleswap_reason;

##########################################################################
# Now create the experiment; we get back a perl class instance.
##########################################################################
if (! ($experiment = Experiment->Create($group, $eid, \%args))) {
    tbdie({type => 'secondary', severity => SEV_SECONDARY,
	   error => ['create_experiment_record_failed']},
	  "Could not create a new experiment record!");
}

#
# At this point, we need to force a cleanup no matter how we exit.
# See the END block below.
#
$justexit = 0;

my $course_swaperr_cclist;
if (defined($user_course_pid)) {
    my $project = Project->Lookup($pid);
    my $inst = User->Lookup($project->head_idx);
    $course_swaperr_cclist = $inst->name . " <" . $inst->email . ">";
    my $group = Group->Lookup($pid,$experiment->gid);
    my @group_roots;
    $group->MemberList(\@group_roots, $Group::MEMBERLIST_FLAGS_GETTRUST,
			'group_root');
    foreach (@group_roots) {
	$course_swaperr_cclist .= ", ". $_->name . " <" . $_->email . ">";
    }
}

#
# Set error reporting info
# 
tblog_set_info($pid,$eid,$UID);

#########################################################################
# Create a directory structure for the experiment.
#########################################################################
if ($experiment->CreateDirectory() != 0) {
    if (($? >> 8) == EDQUOT()) {
	# Obey exit status protocol for web page; User should see this.
	$errorstat = 1;
    }
    fatal({type => 'secondary', severity => SEV_SECONDARY,
	   error => ['create_experiment_directory_failed']},
	  "Failed to created experiment directory");
}

#
# Grab the working directory path, and thats where we work.
# The user's experiment directory is off in /proj space.
#
my $workdir = $experiment->WorkDir();
my $userdir = $experiment->UserDir();

chdir("$workdir") or
    fatal("Could not chdir to $workdir: $!");

############################################################################
# Create a new archive 
############################################################################
if (libArchive::TBCreateExperimentArchive($pid, $eid) < 0) {
    fatal({type => 'secondary', severity => SEV_SECONDARY,
	   error => ['archive_op_failed', 'create', undef, undef]},
	  "Could not create experiment archive!");
}

#
# Dump the eventkey into a file in the experiment directory. 
#
if ($EVENTSYS) {
    open(KEY, ">" . $experiment->EventKeyPath()) or
	fatal("Could not create eventkey file: $!");
    print KEY $eventkey;
    close(KEY);
}

# And dump the web key too.
open(KEY, ">" . $experiment->WebKeyPath()) or
    fatal("Could not create webkey file: $!");
print KEY $webkey;
close(KEY);

# copy experiment definition file if not eid.xml ..
if (system("/bin/cp", "$xmlInFile", "$xmlfile")) {
	fatal({type => 'primary', severity => SEV_ERROR,
	       error => ['copy_xml_file_failed', $xmlInFile, $xmlfile]},
	      "Could not copy $xmlInFile to $workdir/$xmlfile");
}
chmod(0664, "$xmlfile");

#############################################################################
# Gather statistics; start the clock ticking.
#############################################################################
if ($frontend || $batchmode) {
    $experiment->PreSwap($this_user, TBDB_STATS_PRELOAD, $exptstate) == 0 or
	fatal("Preswap failed!");
}
else {
    $experiment->PreSwap($this_user, TBDB_STATS_START, $exptstate) == 0 or
	fatal("Preswap failed!");
}

#
# The rest of this goes into the background so that the user sees
# immediate response. We will send email later when the experiment
# is ready. In waitmode, we hold the parent waiting so that the user
# can script it. Must protect against async (^C) termination though.
#
$logfile = $experiment->CreateLogFile("startexp");

if (!defined($logfile)) {
    fatal("Could not create logfile!");
}

$logname = $logfile->filename();

# We want it to spew to the web.
$experiment->SetLogFile($logfile);

# Mark it open since we are going to start using it right away.
$logfile->Open();

if (my $childpid = TBBackGround($logname)) {
    #
    # Parent exits normally, unless in waitmode. We have to set
    # justexit to make sure the END block below does not run.
    #
    $justexit = 1;
    
    if (!$waitmode) {
	print("Experiment $pid/$eid is now configuring\n".
 	      "You will be notified via email when the experiment is ".
	      "ready to use\n");
	exit(0);
    }
    print("Waiting for " . ($batchmode ? "batch " : "") . "experiment $eid ".
	  "to finish " . ($frontend ? "preloading." : "swapping in.") . "\n");

    if (isatty(STDIN)) {
	print("You may type ^C at anytime; you will be notified via email.\n".
	      "You will not actually interrupt the experiment itself.\n");
    }

    # Give child a chance to run.
    select(undef, undef, undef, 0.25);
	
    #
    # Reset signal handlers. User can now kill this process, without
    # stopping the child.
    #
    $SIG{TERM} = 'DEFAULT';
    $SIG{QUIT} = 'DEFAULT';
    $SIG{INT}  = 'DEFAULT';

    #
    # Wait until child exits or until user gets bored and types ^C.
    #
    waitpid($childpid, 0);

    print("Done. Exited with status: $?\n");

    my $exit_code = $? >> 8;
    
    if ($exit_code != 0) {
	my $d = tblog_lookup_error();
	my $output = tblog_format_error($d);
	print $output;
    }
    
    exit $exit_code;
}

TBdbfork();

#
# When in waitmode, must put ourselves in another process group so that
# an interrupt to the parent will not have any effect on the backend.
#
if ($waitmode) {
    POSIX::setsid();
}
skiplog:

# We are committed now. Affects how fatal() operates.
$committed = 1;

#
# We need to catch TERM cause sometimes shit happens and we have to kill
# an experiment setup that is hung or otherwise scrogged. Rather then 
# trying to kill off the children one by one, lets arrange to catch it
# here and send a killpg to the children. This is not to be done lightly,
# cause it can leave things worse then they were before!
#
sub handler ($) {
    my ($signame) = @_;
    
    $SIG{TERM} = 'IGNORE';
    my $pgrp = getpgrp(0);
    kill('TERM', -$pgrp);
    sleep(1);
    $TERMsignaled = 1;
    fatal("Caught SIG${signame}! Killing experiment setup ...");
}
$SIG{TERM} = \&handler;
$SIG{QUIT} = 'DEFAULT';

#
# The guts of starting an experiment!
#
# A batch experiment is essentially preloaded (frontend mode) and then
# dropped into the batch queue, unless the user requested only preload.
#

############################################################################
# Run the various scripts. We want to propagate the error from tbprerun
# and tbrun back out, hence the bogus looking errorstat variable.
#
# Call PreRun which starts the real work to create experiment
############################################################################
$experiment->SetState(EXPTSTATE_PRERUN) == 0
    or fatal("Failed to set experiment state to " . EXPTSTATE_PRERUN());

print("Start experiment->PreRun $xmlfile, PID=$pid EID=$eid GID=$gid\n");
if ($experiment->PreRun($xmlfile, "-G")) {
    $errorstat = $? >> 8;
    fatal({type => 'secondary', severity => SEV_SECONDARY,
	   error => ['tbprerun_failed']},
	  "tbprerun failed!");
}

$experiment->SetState(EXPTSTATE_SWAPPED) == 0
    or fatal("Failed to set experiment state to " . EXPTSTATE_SWAPPED());

#
# If not in frontend mode (preload only) continue to swapping exp in.
# 
if (! ($frontend || $batchmode)) {
    $experiment->SetState(EXPTSTATE_ACTIVATING) == 0
	or fatal("Failed to set experiment state to ". EXPTSTATE_ACTIVATING());

    if ($experiment->Swap($Experiment::EXPT_SWAPIN) != 0) {
	$errorstat = $? >> 8;
	fatal({type => 'secondary', severity => SEV_SECONDARY,
	       error => ['tbswap_in_failed']}, "tbswap in failed!");
    }
    
    $experiment->SetState(EXPTSTATE_ACTIVE) == 0
	or fatal("Failed to set experiment state to " . EXPTSTATE_ACTIVE());

    #
    # Look for the unsual case of more than 2 nodes and no vlans. Send a
    # warning message.
    #
    my @localnodes = ();
    fatal("Could not get local node list for $pid/$eid")
	if ($experiment->LocalNodeListNames(\@localnodes));

    if (@localnodes && scalar(@localnodes) > 2) {
	my $vlans_result =
	    DBQueryFatal("select pid from virt_lans ".
			 "where pid='$pid' and eid='$eid'");
    
	if (!$vlans_result->numrows && !$noemail) {
	    SENDMAIL("$user_name <$user_email>",
		     "WARNING: Experiment Configuration: $pid/$eid",
		     "This experiment has zero network links defined.\n".
		     "Please check your NS file to verify this is what you ".
		     "want!\n",
		     $TBOPS,
		     "Cc: $TBOPS", ($xmlfile));
	}
    }
}

# We append this report in the email message below.
if ($experiment->Report($repfile, "-b") != 0) {
    fatal({type => 'secondary', severity => SEV_SECONDARY,
	   error => ['tbreport_failed']},
	  "tbreport failed!");
}

# Latest log is always called the same thing.
if (defined($logname)) {
    system("cp -fp $logname $workdir/" . EXPTLOGNAME());
}

#
# Save a copy of the files for testbed information gathering (long term).
#

$experiment->SaveLogFiles();

#
# Make a copy of the work dir in the user visible space so the user
# can see the log files.
#
$experiment->CopyLogFiles();

# Tell the archive library to add all files to the archive. 
libArchive::TBExperimentArchiveAddUserFiles($pid, $eid) == 0
    or fatal("Failed to add user archive files to the archive!");

#
# Do a SavePoint on the experiment files. 
#

print "Doing a savepoint on the experiment archive ...\n";
if (libArchive::TBExperimentArchiveSavePoint($pid, $eid, "startexp") < 0) {
	fatal({type => 'secondary', severity => SEV_SECONDARY,
	       error => ['archive_op_failed', 'savepoint', undef, undef]},
	      "Failed to do a savepoint on the experiment archive!");
}


#
# Gather statistics. This is not likely to fail, but if it does I want to
# bail cause the inconsistent records are a pain in the ass to deal with!
#
if ($frontend || $batchmode) {
    $experiment->PostSwap($this_user, TBDB_STATS_PRELOAD) == 0 or
	fatal("Postswap failed!");
}
else {
    $experiment->PostSwap($this_user, TBDB_STATS_START) == 0 or
	fatal("Postswap failed!");
}

#
# Set accounting stuff, but on success only, and *after* gathering swap stats!
#
$experiment->SetSwapInfo($this_user);

#
# Close up the log file so the webpage stops.
#
print "Experiment $pid/$eid has been successfully created!\n";
#print "Experiment REPFILE=$repfile, LOGFILE=$logfile, XMLFILE=$xmlfile\n");
$experiment->CloseLogFile();

#
# Must unlock and drop batch experiments into the queue before exit.
#
if ($batchmode && !$frontend) {
    $experiment->Unlock(EXPTSTATE_QUEUED());
}
else {
    $experiment->Unlock();
}

#
# Clear the cancel flag now that the operation is complete. Must be
# done after we change the experiment state (above).
#
$experiment->SetCancelFlag(EXPTCANCEL_CLEAR());

#
# Dump the report file and the log file to the user via email. 
#
my ($expt_created) = $experiment->created();
my $message;

if ($frontend) {
    $message =
	"Your experiment `$eid' in project `$pid' has been created.\n" .
	"You can check the web interface to see if it looks the way\n" .
	"you expected it to. If so, you may swap the experiment in,\n" .
	"or terminate it, at any time.\n" .
        "\n";
}
else {
    $message =
	"Your experiment `$eid' in project `$pid' has been started.\n" .
	"Here is the experiment summary detailing the nodes that were\n" .
	"allocated to you. You may use the `Qualified Name' to log on\n" .
	"to your nodes. See /etc/hosts on your nodes (when running\n" .
	"FreeBSD, Linux, or NetBSD) for the IP mapping on each node.\n" .
        "\n";
}
$message .=
    "User:        $user_name\n" .
    "EID:         $eid\n" .
    "PID:         $pid\n" .
    "GID:         $gid\n" .
    "Description: $description\n" .
    "Swappable:   " . ($swappable ? "Yes\n" :
		                    "No  (Reason: $noswap_reason)\n") .
    "Idle-Swap:   " . ($idleswap  ? "Yes, at " . $idleswaptime/60.0 . " hours\n":
		                    "No  (Reason: $noidleswap_reason)\n") .
    "Auto-Swap:   " . ($autoswap  ? "Yes, at " . $autoswaptime/60.0 . " hours\n":
		                    "No\n") .
    "Created:     $expt_created\n".
    "Directory:   $userdir\n".
    "\n".
    "Appended at the end is the output of the experiment setup. If you\n" .
    "have any questions or comments, please include the output below\n" .
    "in your message to $TBOPS";

SENDMAIL(($noemail ? $TBLOGS : "$user_name <$user_email>"),
	 "New Experiment " . (($frontend == 0) ? "Started" : "Created") .
	 ": $pid/$eid",
	 $message,
	 $TBOPS,
	 ($noemail ? "" : "Bcc: $TBLOGS"),
	 ($repfile, $logname, $xmlfile));

# Done!
exit(0);


############################################################################
# CLEANUP
# Failed early (say, in parsing). No point in keeping any of the
# stats or resource records. Just a waste of space since the
# testbed_stats log indicates there was a failure and why (sorta,
# via the exit code).
############################################################################
sub cleanup()
{
    if (!$committed) {
	# Completely remove all trace of the archive.
        libArchive::TBDestroyExperimentArchive($pid, $eid);

	#
	# Clear the experiment record and cleanup directories
	#
	$experiment->Delete(1)
	    if (defined($experiment));

	return;
    }

    #
    # Gather statistics.
    #
    if ($frontend) {
	$experiment->SwapFail($this_user, TBDB_STATS_PRELOAD, $errorstat);
    }
    else {
	$experiment->SwapFail($this_user, TBDB_STATS_START, $errorstat);
    }

    #
    # Must clean up the experiment if it made it our of NEW state.
    #
    my $estate = $experiment->state();
    if ($estate ne EXPTSTATE_NEW) {
	#
	# We do not know exactly where things stopped, so if the
	# experiment was activating when the signal was delivered,
	# run tbswap on it. 
	# 
	if ($estate eq EXPTSTATE_ACTIVE ||
	    ($estate eq EXPTSTATE_ACTIVATING && $TERMsignaled)) {
	    if ($experiment->Swap("out", "-force") != 0) {
		print "tbswap out -force failed!\n";
	    }
	    $experiment->SetState(EXPTSTATE_SWAPPED);
	}
	
	if ($experiment->End("-f") != 0) {
	    print "tbend failed!\n";
	}
    }
    $experiment->SetState(EXPTSTATE_TERMINATED);

    # Old swap gathering stuff.
    $experiment->GatherSwapStats($this_user, TBDB_STATS_TERMINATE, 0);

    # Clear the logfile so the webpage stops.
    $experiment->CloseLogFile();

    if (!$ENV{'TBAUDITON'}) {
	#
	# Figure out the error if possible
	#
	my $error_data = tblog_find_error();
	
	#
	# Send a message to the testbed list. 
	#
	tblog_email_error($error_data,
			  "$user_name <$user_email>",
			  "Config Failure", "$pid/$eid",
			  "$user_name <$user_email>",
			  defined($course_swaperr_cclist) ? ", $course_swaperr_cclist" : "",
			  "Cc: $TBOPS",
			  "",
			  ($logname, "assign.log", "wanassign.log", $xmlfile))
	    unless $noemail;
    } 	
	
    #
    # Back up the work dir for post-mortem debugging. 
    #
    system("/bin/rm -rf  ${workdir}-failed");
    system("/bin/mv -f   $workdir ${workdir}-failed");

    #
    # Clear the record and cleanup.
    #
    $experiment->Delete();
}

########################################################################
# PARSE ARGUMENTS
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
########################################################################
sub ParseArgs()
{
    my %options = ();
    if (! getopts($optlist, \%options)) {
	usage();
    }

    if (@ARGV > 1) {
	usage();
    }
    if (@ARGV == 1) {
	$xmlInFile = $ARGV[0];

	# Note different taint check (allow /).
	if ($xmlInFile =~ /^([-\w\.\/]+)$/) {
	    $xmlInFile = $1;
	}
	else {
	    tbdie("Bad data in xml file: $xmlInFile");
	}

	# Called from ops interactively. Make sure NS file resides in an
	# appropriate location.
	# Use realpath to resolve any symlinks.
	my $translated = `realpath $xmlInFile`;
	if ($translated =~ /^([-\w\.\/]+)$/) {
	    $xmlInFile = $1;
	}
	else {
	    tbdie({type => 'primary', severity => SEV_ERROR,
		   error => ['bad_data', 'realpath', $translated]},
		  "Bad data returned by realpath: $translated");
	}

	# The file must reside in an acceptible location. Since this script
	# runs as the caller, regular file permission checks ensure it is a
	# file the user is allowed to use.  So we don't have to be too tight
	# with the RE matching /tmp and /var/tmp files.  Note that
	# /tmp/$guid-$nsref.xmlfile is also allowed since this script is
	# invoked directly from web interface which generates a name that
	# should not be guessable.
	if (! ($xmlInFile =~ /^\/tmp\/\d+\.xml/) &&
	    ! ($xmlInFile =~ /^\/(var\/)?tmp\/php[-\w]+/) &&
	    ! TBValidUserDir($xmlInFile, 0)) {
	    tberror({type => 'primary', severity => SEV_ERROR,
		     error => ['disallowed_directory', $xmlInFile]},
		    "$xmlInFile does not resolve to an allowed directory!");
	    # Note positive status; so error goes to user not tbops.
	    exit(1);
	}
    }
    
    if (defined($options{"i"})) {
	$batchmode = 0;
    }
    if (defined($options{"f"})) {
	$frontend = 1;
    }

    # This option should not be exported via the XMLRPC server. 
    if (defined($options{"n"})) {
	$idleignore = 1;
    }

    if (defined($options{"s"})) {
	$savestate = 1;
    }

    if (defined($options{"k"})) {
	$lockdown = 1;
    }

    #
    # pid,eid,gid get passed along as shell commands args; must taint check.
    # 
    if (defined($options{"p"})) {
	$pid = $options{"p"};

	if ($pid =~ /^([-\w]+)$/) {
	    $pid = $1;
	}
	else {
	    tbdie({type => 'primary', severity => SEV_ERROR,
		   error => ['bad_data', 'argument', $pid]},
		  "Bad data in argument: $pid.");
	}
    }
    if (defined($options{"e"})) {
	$eid = $options{"e"};

	if ($eid =~ /^([-\w]+)$/) {
	    $eid = $1;
	}
	else {
	    tbdie({type => 'primary', severity => SEV_ERROR,
		   error => ['bad_data', 'argument', $eid]},
		  "Bad data in argument: $eid.");
	}
	if (! TBcheck_dbslot($eid, "experiments", "eid",
			   TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie({type => 'primary', severity => SEV_ERROR,
		   error => ['bad_data', 'eid', $eid]},
		  "Improper experiment name (id)!");
	}
    }
    if (defined($options{"g"})) {
	$gid = $options{"g"};

	if ($gid =~ /^([-\w]+)$/) {
	    $gid = $1;
	}
	else {
	    tbdie({type => 'primary', severity => SEV_ERROR,
		   error => ['bad_data', 'argument', $gid]},
		  "Bad data in argument: $gid.");
	}
    }
    if (defined($options{"E"})) {
	if (! TBcheck_dbslot($options{"E"}, "experiments", "expt_name",
			   TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper experiment description!");
	}
	$description = $options{"E"};
    }
    if (defined($options{"S"})) {
	if (! TBcheck_dbslot($options{"S"}, "experiments", "noswap_reason",
			   TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper noswap reason!");
	}
	$swappable     = 0;
	$noswap_reason = $options{"S"};
    }
    if (defined($options{"L"})) {
	if (! TBcheck_dbslot($options{"L"}, "experiments", "noidleswap_reason",
			   TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper noidleswap reason!");
	}
	$idleswap          = 0;
	$noidleswap_reason = $options{"L"};
    }
    if (defined($options{"l"})) {
	if (! TBcheck_dbslot($options{"l"}, "experiments", "idleswap_timeout",
			   TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper idleswap timeout!");
	}
        $idleswap     = 1;
	$idleswaptime = $options{"l"};
    }
    if (defined($options{"a"})) {
	if (! TBcheck_dbslot($options{"a"}, "experiments", "autoswap_timeout",
			   TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper autoswap timeout!");
	}
        $autoswap     = 1;
	$autoswaptime = $options{"a"};
    }
    if (defined($options{"t"})) {
	if (! TBcheck_dbslot($options{"t"}, "experiments", "linktest_level",
			   TBDB_CHECKDBSLOT_WARN|TBDB_CHECKDBSLOT_ERROR)) {
	    tbdie("Improper linktest level!");
	}
	$linktest = $options{"t"};
    }
    if (defined($options{"w"})) {
	$waitmode = 1;
    }
 
    if (defined($options{"N"})) {
	$noemail = 1;
    }

	#
	# Sanity check them.
	#
	usage()
	    if (!defined($pid) || !defined($eid));
	
	if (!defined($gid)) {
	    $gid = $pid;
	}
	if (!defined($description)) {
	    $description = "Created by $user_uid";
	}
	if (! $swappable && (!defined($noswap_reason) || $noswap_reason eq "")) {
	    tbdie("Must provide a reason with -S option (not swappable reason)!");
	}
	if (! $idleswap && (!defined($noidleswap_reason) || $noidleswap_reason eq "")){
	    tbdie("Must provide a reason with -L option (no idleswap reason)!");
	}
	
	$xmlfile  = "$eid.xml";
	$repfile = "report";
	
	# Defaults for the DB and for the email message. 
	$noswap_reason = "None Given"
	    if (!defined($noswap_reason));
	$noidleswap_reason = "None Given"
	    if (!defined($noidleswap_reason));
	
	# Need the group
	$group = Group->Lookup($pid, $gid);
	if (!defined($group)) {
	    die("No such group $pid/$gid!");
	}
	
	#
	# Make sure the project/group isn't over quota
	#
	my $unix_gid=$group->unix_gid();
	
	if (system("$checkquota $unix_gid") != 0) {
	    tberror({cause => 'user', type => 'primary', severity => SEV_ERROR,
	             error => ['over_disk_quota', $CONTROL]},
	            "Your project/group is over your disk quota on $CONTROL; ".
	            "please login there and cleanup!");
	    exit(1);
	}
	
	#
	# Make sure UID is allowed to create experiments in this project.
	#
	if (! $group->AccessCheck($this_user, TB_PROJECT_CREATEEXPT)) {
	    die("You do not have permission to create experiments in $pid/$gid");
	}
	
	if (! -f $xmlInFile || ! -r $xmlInFile || -z $xmlInFile) {
	    # Exit so that user sees the error, not us.
	    tberror({type => 'primary', severity => SEV_ERROR,
		     error => ['bogus_ns_file', $xmlInFile]},
		    "$xmlInFile does not exist or is not a readable file!");
	    exit(1);
	}
}


##############################################################################################
# We need this END block to make sure that we clean up after a fatal exit in the library.
# This is problematic, cause we could be exiting cause the mysql server has gone whacky again. 
##############################################################################################
sub fatal($;$)
{
    my $parms = {};
    $parms = shift if ref $_[0] eq 'HASH';
    my($mesg) = $_[0];

    tberror($parms, $mesg);
    tbinfo "Cleaning up and exiting with status $errorstat ...";

    # This exit will drop into the END block below. 
    exit($errorstat);
}

END {
    # Normal exit, nothing to do.
    if (!$? || $justexit) {
	return;
    }
    my $saved_exitcode = $?;
    
    if ($cleaning) {
	# We are screwed; a recursive error. Someone will have to cleanup by hand. 
	SENDMAIL($TBOPS, "Experiment Configure Failure: $pid/$eid",
		 "Recursive error in cleanup! This is very bad.");
	$? = $saved_exitcode;
	return;
    }
    $cleaning = 1;
    cleanup();
    $? = $saved_exitcode;
}
