#!/usr/bin/perl -wT

#
# EMULAB-COPYRIGHT
# Copyright (c) 2000-2009 University of Utah and the Flux Group.
# All rights reserved.
#

use English;
use Getopt::Std;
use POSIX qw(isatty setsid);
use RPC::XML;

#
# This gets invoked from the Web interface.
# Swap an experiment in, swap it out, restart or modify.
#

sub usage()
{
    print(STDERR
      "Usage: swapexp [-q] [-b | -w] [-i | -a | -f] [-r] [-e] [-N]\n".
      "               <-s in | out | restart | modify | pause>\n".
      "               <pid> <eid> [<nsfile>]\n".
      "switches and arguments:\n".
      "-w       - wait for experiment swap/modify\n".
      "-q       - be less chatty\n".
      "-r       - reboot nodes when doing a modify experiment\n".
      "-e       - restart event scheduler when doing a modify experiment\n".
      "-s <op>  - Operation to perform; one of those listed above\n".
      "-N       - Suppress most email to the user and testbed-ops\n".
      "<pid>    - The project the experiment belongs to\n".
      "<eid>    - The experiment name (id)\n".
      "<nsfile> - Optional NS file to parse for experiment modify\n");
    exit(-1);
}
my  $optlist = "biafres:wqxgNXn";

#
# Configure variables
#
my $TB     = "/usr/testbed";
my $TBOPS  = "testbed-ops\@minibed.deterlab.net";
my $TBLOGS = "testbed-logs\@minibed.deterlab.net";
my $TBINFO = "$TB/expinfo";
my $TBDOCBASE = "http://www.minibed.deterlab.net";
my $TBBASE = "https://www.minibed.deterlab.net";
my $CONTROL  = "users.minibed.deterlab.net";

#
# Testbed Support libraries
#
use lib "/usr/testbed/lib";
use libdb;
use libtestbed;
use libtblog;
use libArchive;
use Template;
use Experiment;
use User;

# Be careful not to exit on transient error; 0 means infinite retry.
$libdb::DBQUERY_MAXTRIES = 0;

# For the END block below.
my $cleaning = 0;
my $justexit = 1;
my $signaled = 0;

my $tbdir    = "$TB/bin";
my $tbdata   = "tbdata";
my $checkquota = "$TB/sbin/checkquota";
my $vtopgen  = "$TB/bin/vtopgen";
my $idleswap = 0;
my $autoswap = 0;
my $force    = 0;
my $reboot   = 0;
my $waitmode = 0;
my $quiet    = 0;
my $noswapout= 0;
my $noreconfig=0;
my $eventsys_restart   = 0;
my $errorstat= -1;
my $modifyHosed   = 0;
my $modifySwapped = 0;
my $robotexp = 0;
my $noemail      = 0;
my $xmlout       = 0;

my $inout;
my $logfile;
my $logname;
my @allnodes;
my @row;
my $action;
my $tag;
my $nextswapstate;
my $termswapstate;

my $modifyError; # needed when emailing error

# Protos
sub fatal($;$);
sub CheckFWinfo($);
sub GatherFWinfo();
        
# Parse command arguments. Once we return from getopts, all that should
# left are the required arguments.
#
%options = ();
if (! getopts($optlist, \%options)) {
    usage();
}
if (defined($options{"i"})) {
    $idleswap = 1;
}
if (defined($options{"w"})) {
    $waitmode = 1;
}
if (defined($options{"a"})) {
    $autoswap = 1;
}
if (defined($options{"f"})) {
    $force = 1;
}
if (defined($options{"n"})) {
    $noswapout  = 1;
    $noreconfig = 1;
}
if (defined($options{"r"})) {
    $reboot = 1;
}
if (defined($options{"e"})) {
    $eventsys_restart = 1;
}
if (defined($options{"q"})) {
    $quiet = 1;
}
if (defined($options{"N"})) {
    $noemail = 1;
}
if (defined($options{"X"})) {
    $quiet = 1;
    $xmlout = 1;
}
if (defined($options{"s"})) {
    $inout = $options{"s"};

    if ($inout ne "out"     &&
    $inout ne "in"      &&
    $inout ne "restart" &&
    $inout ne "pause"   &&
    $inout ne "modify") {
    usage();
    }
}
else {
    usage();
}

usage()
    
    if (($inout ne "modify" && @ARGV != 2) ||
    (($waitmode) && ($idleswap || $autoswap || $force)));

if ($eventsys_restart && $inout ne "modify") {
    print STDOUT "Usage: swapexp: -e (eventsys_restart) can be used ".
                 "only with -s modify\n";
    usage();
}
my $pid   = $ARGV[0];
my $eid   = $ARGV[1];

my $repfile = "tbreport.log";
my $tempnsfile;
my $modnsfile;
my $nsfile;

if ($inout eq "modify" && @ARGV > 2) {
    $tempnsfile = $ARGV[2];

    # The file must reside in an acceptible location. Since this script
    # runs as the caller, regular file permission checks ensure it is a
    # file the user is allowed to use.   So we don't have to be too tight
    # with the RE matching /tmp and /var/tmp files.  Note that
    # /tmp/$guid-$nsref.nsfile is also allowed since this script is
    # invoked directly from web interface which generates a name that
    # should not be guessable.
    #
    if (! ($tempnsfile =~ /^\/tmp\/[-\w]+-\d+\.nsfile/) &&
    ! ($tempnsfile =~ /^\/(var\/)?tmp\/php[-_A-Za-z0-9]+/) &&
    ! TBValidUserDir($tempnsfile, 0)) {
    tbdie("$tempnsfile does not resolve to an allowed directory!");
    }

    if (! -f $tempnsfile || -z $tempnsfile || ! -r $tempnsfile) {
    tbdie("$tempnsfile does not look like an NS file!");
    }
    $nsfile    = "$eid.ns";
    $modnsfile = "${eid}-modify.ns";
}

my $experiment = Experiment->Lookup($pid, $eid);
if (! $experiment) {
    die("*** $0:\n".
    "    No such experiment $pid/$eid in the Emulab Database.\n");
}

my $workdir = $experiment->WorkDir();
my $userdir = $experiment->UserDir();
my $unix_gid = $experiment->unix_gid();

#
# Verify user and get his DB uid and other info for later.
#
my $this_user = User->ThisUser();
if (! defined($this_user)) {
    tbdie("You ($UID) do not exist!");
}
my $user_dbid  = $this_user->dbid();
my $user_uid   = $this_user->uid();
my $user_name  = $this_user->name();
my $user_email = $this_user->email();
my $user_course_pid = $this_user->CourseAcct();
my $isadmin    = TBAdmin();

#
# Get email address of the swapper/creator, which may be different than
# the person who is actually terminating the experiment, since its polite
# to let the original creator know whats going on. 
#
my $swapper = $experiment->GetSwapper();
$swapper = $experiment->GetCreator()
    if (!defined($swapper));
my $expt_head_name  = $swapper->name();
my $expt_head_email = $swapper->email();

my $course_swaperr_cclist;
if (defined($user_course_pid)) {
    my $project = Project->Lookup($pid);
    my $inst = User->Lookup($project->head_idx);
    $course_swaperr_cclist = $inst->name . " <" . $inst->email . ">";
    my $group = Group->Lookup($pid,$experiment->gid);
    my @group_roots;
    $group->MemberList(\@group_roots, $Group::MEMBERLIST_FLAGS_GETTRUST,
			'group_root');
    foreach (@group_roots) {
	$course_swaperr_cclist .= ", ". $_->name . " <" . $_->email . ">";
    }
}

#
# Set error reporting info
#
tblog_set_info($pid,$eid,$UID);

#
# Verify that this person can muck with the experiment.
# Note that any script down the line has to do an admin check also. 
#
if ($UID && !$isadmin &&
    ! $experiment->AccessCheck($this_user, TB_EXPT_DESTROY)) {
    tbdie("You do not have permission to swap or modify this experiment!");
}

# Must do this before lock tables!
# idleswap is in minutes, threshold is in hours
$idleswap_time = 60 * TBGetSiteVar("idle/threshold");

#
# Temp fix; Disallow swapmod to firewalled experiments. This will come
# out later.
#
my $firewalled = $experiment->IsFirewalled();

#
# see if we've got a robot exp (this isn't the only check; if this is a
# swapmod, we've got to check tbprerun as well...
#
$robotexp = 
    TBExptContainsNodeCT($pid,$eid,'robot') || 
    TBExptContainsNodeCT($pid,$eid,'mote') || 
    TBExptContainsNodeCT($pid,$eid,'motehost') || 
    TBExptContainsNodeCT($pid,$eid,'powermon');

#
# We have to protect against trying to end an experiment that is currently
# in the process of being terminated. We use a "wrapper" state (actually
# a timestamp so we can say when termination was requested) since
# terminating consists of a couple of different experiment states down inside
# the tb scripts.
#
$experiment->LockTables() == 0
    or die("*** $0:\n".
       "    Could not lock experiment tables for $pid/$eid!\n");

my $estate          = $experiment->state();
my $expt_path       = $experiment->path();
my $canceled        = $experiment->canceled();
my $expt_locked     = $experiment->locked();
my $elabinelab      = $experiment->elabinelab();
my $lockdown        = $experiment->lockdown();
my $swappablebit    = $experiment->swappable();
my $idleswapbit     = $experiment->idleswap();
my $autoswapbit     = $experiment->autoswap();
my $swappablestr    = ( $swappablebit ? "Yes" : "No" );
my $idleswapstr     = ( $idleswapbit ? "Yes" : "No" );
my $autoswapstr     = ( $autoswapbit ? "Yes" : "No" );
my $noswap          = $experiment->noswap_reason();
my $noidleswap      = $experiment->noidleswap_reason();
my $idleswaptime    = $experiment->idleswap_timeout() / 60.0;
my $autoswaptime    = $experiment->autoswap_timeout() / 60.0;
my $rendering       = $experiment->prerender_pid();

if ($inout ne "out") {
    # I'm going to update this below, so fix the value before I use it.
    $idleswap_time = min($idleswaptime * 60, $idleswap_time);
    $idleswaptime = $idleswap_time / 60.0;
}

my $swapsettings = 
  "Idle-Swap:   $idleswapstr".
  ($idleswapbit ? ", at $idleswaptime hours\n" : " (Reason: $noidleswap)\n").
  "Auto-Swap:   $autoswapstr".
  ($autoswapbit ? ", at $autoswaptime hours\n" : "\n");

if (! chdir($workdir)) {
    tbdie("Could not chdir to $workdir: $!");
}

#
# Determine the temporary and next state for experiment. If the experiment
#
SWITCH: for ($inout) {
    /^in$/i && do {
    $nextswapstate = EXPTSTATE_ACTIVATING();
    last SWITCH;
    };
    /^out$/i && do {
    $nextswapstate = EXPTSTATE_SWAPPING();
    last SWITCH;
    };
    /^restart$/i && do {
    $nextswapstate = EXPTSTATE_RESTARTING();
    last SWITCH;
    };
    /^modify$/i && do {
    $nextswapstate = (($estate eq EXPTSTATE_SWAPPED()) ?
              EXPTSTATE_MODIFY_PARSE() : EXPTSTATE_MODIFY_REPARSE());
    last SWITCH;
    };
    tbdie("Missing state check for action: $action");
}
 
# Update idleswap_timeout to whatever the current value is.
if ($inout ne "out") {
    $experiment->UpdateIdleSwapTime($idleswap_time) == 0
    or tbdie("Could not update idleswap timeout for $pid/$eid");
}

#
# On a failure, we go back to this swapstate. Might be modified below.
# 
$termswapstate = $estate;

# Lock the record, set the nextstate, and unlock the table. Unlock
# tables at same time.
$experiment->Lock($nextswapstate, 1) == 0
    or tbdie({type => 'secondary', severity => SEV_SECONDARY,
          error => ['set_experiment_state_failed', $nextswapstate]},
         "Failed to set experiment state to $nextswapstate");

#
# At this point, we need to force a cleanup no matter how we exit.
# See the END block below.
#
$justexit = 0;

# Need the previous swapper for rollback below. Safe now that tables unlocked.
my $last_swapper = User->Lookup($experiment->swapper_idx());
if (! defined($last_swapper)) {
    tbdie("Error looking up object for last swapper!");
}

#
# XXX - At this point a failure is going to leave things in an
# inconsistent state. Be sure to call fatal() only since we are
# going into the background, and we have to send email since no
# one is going to see printed error messages (output goes into the
# log file, which will be sent along in the email). 
#

if ($inout eq "in") {
    $action = "swapped in";
    $tag    = "swapin";
}
if ($inout eq "out") {
    $action = "swapped out";
    $tag    = "swapout";
}
if ($inout eq "restart") {
    $action = "restarted";
}
if ($inout eq "modify") {
    $action = "modified";
    $tag    = "swapmod";
}

#
# go into the background. Parent exits.
#
    # Cleanup
    $experiment->CleanLogFiles() == 0
    or fatal("Could not clean up logfiles!");

    $logfile = $experiment->CreateLogFile("swapexp");
    if (!defined($logfile)) {
    fatal("Could not create logfile!");
    }
    $logname = $logfile->filename();
    # We want it to spew to the web.
    $experiment->SetLogFile($logfile);
    # Mark it open since we are going to start using it right away.
    $logfile->Open();

    if (my $childpid = TBBackGround($logname)) {
    #
    # Parent exits normally, unless in waitmode. We have to set
    # justexit to make sure the END block below does not run.
    #
    $justexit = 1;

    if (!$waitmode) {
        print("Experiment $pid/$eid is now being $action.\n".
          "You will be notified via email when the this is done.\n")
        if (! $quiet);
        exit(0);
    }
    print("Waiting for experiment $eid to finish its swap${action}\n")
        if (! $quiet);
        
    if (isatty(STDIN) && !$quiet) {
        print("You may type ^C at anytime; you will be notified via email.".
          "\n".
          "You will not actually interrupt the experiment itself.\n");
    }
    
    # Give child a chance to run.
    select(undef, undef, undef, 0.25);
    
    #
    # Reset signal handlers. User can now kill this process, without
    # stopping the child.
    #
    $SIG{TERM} = 'DEFAULT';
    $SIG{INT}  = 'DEFAULT';
    $SIG{QUIT} = 'DEFAULT';

    #
    # Wait until child exits or until user gets bored and types ^C.
    #
    waitpid($childpid, 0);
    
    print("Done. Exited with status: $?\n")
        if (! $quiet);

    my $exit_code = $? >> 8;

    if ($exit_code != 0) {
        my $d = tblog_lookup_error();
        my $output = tblog_format_error($d);
        if ($xmlout) {
        use libtblog '*SOUT'; # to avoid an unnecessary, and large,
                                      # log entry
        if (open(IN, "$logname")) {
            $d->{log} = '';
            while (<IN>) {
            $d->{log} .= $_;
            }
            close IN;
        }
        $d->{output} = $output;
            print SOUT RPC::XML::response->new($d)->as_string(), "\n";
        } elsif (!$quiet) {
        print $output;
        }
    }
    exit $exit_code;

    }
    TBdbfork();

#
# Gather stats; start clock ticking
#
if ($inout eq "in") {
    $experiment->PreSwap($this_user, TBDB_STATS_SWAPIN, $estate) == 0 or
    fatal("Preswap failed!");
}
elsif ($inout eq "out") {
    $experiment->PreSwap($this_user, TBDB_STATS_SWAPOUT, $estate) == 0 or
    fatal("Preswap failed!");
}
elsif ($inout eq "modify") {
    $experiment->PreSwap($this_user, TBDB_STATS_SWAPMODIFY, $estate) == 0 or
    fatal("Preswap failed!");
}

#
# Sanity check states in case someone changes something.
#
if ($inout eq "out") {
    my $optarg = (($force || $idleswap) ? "-force" : "");

    if ($experiment->Swap($Experiment::EXPT_SWAPOUT, $optarg) != 0) {
    $errorstat = $? >> 8;
    fatal({type => 'secondary', severity => SEV_SECONDARY,
           error => ['tbswap_out_failed']},
          "tbswap out failed!");
    }

    #
    # Add the files that have been detected by tracing to the archive.
    #
    if (libArchive::TBExperimentArchiveAddTracedFiles($pid, $eid) < 0) {
        fatal({type => 'secondary', severity => SEV_SECONDARY,
           error => ['archive_op_failed', 'add_traced_files',
                 undef, undef]},
          "Failed to add traced files to the experiment archive!");
    }

    #
    # Add the experiment directory.
    #
    if (libArchive::TBExperimentArchiveAddUserFiles($pid, $eid) < 0) {
        fatal({type => 'secondary', severity => SEV_SECONDARY,
           error => ['archive_op_failed', 'add_user_files',
                 undef, undef]},
          "Failed to add user files to the experiment archive!");
    }

    $experiment->SetState(EXPTSTATE_SWAPPED) == 0
    or fatal({type => 'secondary', severity => SEV_SECONDARY,
          error => ['set_experiment_state_failed', EXPTSTATE_SWAPPED()]},
             "Failed to set experiment state to " . EXPTSTATE_SWAPPED());
    
    $experiment->SetPanicBit(0) == 0
    or fatal("Failed to clear the panic bit!");
}
elsif ($inout eq "in") {
    # Set the swapper now so that nodes use the proper uid. If the swapin
    # fails, we leave the swapper as is, since its harmless and informative.
    $experiment->SetSwapper($this_user);

    if ($experiment->Swap($Experiment::EXPT_SWAPIN) != 0) {
    $errorstat = $? >> 8;
    fatal({type => 'secondary', severity => SEV_SECONDARY,
           error => ['tbswap_in_failed']},
          "tbswap in failed!");
    }
    
    $experiment->SetState(EXPTSTATE_ACTIVE) == 0
    or fatal({type => 'secondary', severity => SEV_SECONDARY,
          error => ['set_experiment_state_failed', EXPTSTATE_ACTIVE()]},
             "Failed to set experiment state to " . EXPTSTATE_ACTIVE());
    
    $experiment->Report($repfile, "-b");
}
elsif ($inout eq "modify") {
    #
    # Prepare the Archive for the swapmod, in case we have to "roll back".
    #
    print "Doing a preswapmod on the experiment archive ...\n";
    if (libArchive::TBExperimentArchivePreSwapMod($pid, $eid) < 0) {
        fatal("Failed to do a preswapmod on the experiment archive!");
    }

    # Gather up some firewall state for later comparison.
    if (GatherFWinfo() < 0) {
    fatal("Could not gather firewall info; cannot safely continue!");
    }

    print "Backing up old experiment state ... " . TBTimeStamp() . "\n";
    $experiment->BackupVirtualState() == 0
    or fatal("Could not backup experiment state; cannot safely continue!");

    #
    # Rerun tbprerun if modifying, but only if new NS file provided.
    # Yep, we allow reswap without changing the NS file. For Shashi and SIM.
    # Note that tbprerun kills the renderer if its running.
    #
    if (defined($modnsfile)) {
        if ($experiment->PreRun($modnsfile) != 0) {
            print STDOUT "Modify Error: tbprerun failed.\n";
          FWHOSED:
            print STDOUT "Recovering experiment state...\n";

            if ($experiment->RemoveVirtualState() ||
                $experiment->RestoreVirtualState()) {

                $modifyHosed = 1;
                fatal("Experiment state could not be restored!");
                # Never returns;
            }
            #
            # If the renderer was running when we started the swapmod, then we
            # want to restart it. If it was stopped, then the renderer info
            # was captured with the rest of the virtual state (restored above).
            #
            system("prerender -t $pid $eid")
                if ($rendering);

            $modifyError = "Update aborted; old virtual state restored.";
            fatal({type => 'secondary', severity => SEV_SECONDARY,
                   error => ['update_aborted', 'virtual_state_restored']},
                  $modifyError);
            # Never returns;
        }

        #
        # Okay, whenever a new NS file is presented, we need to do some
        # checks on the firewall to make sure the user is not trying to
        # do something "unsafe". 
        #
        if (CheckFWinfo($estate) != 0) {
            # All the stuff for recovering is right above, so go there. 
            goto FWHOSED;
        }
    }

    #
    # Our next state depends on whether the experiment was active or swapped.
    #
    if ($estate eq EXPTSTATE_SWAPPED) {
        $experiment->SetState(EXPTSTATE_SWAPPED) == 0
            or fatal("Failed to set experiment state to ".EXPTSTATE_SWAPPED());
    } else {
        $experiment->SetState(EXPTSTATE_MODIFY_RESWAP) == 0
            or fatal("Failed to set experiment state to " .
                     EXPTSTATE_MODIFY_RESWAP());

        # Set the swapper now so that nodes use the proper uid. If the
        # swapin fails, we need to reset the swapper back so that he
        # is charged appropriately.
        $experiment->SetSwapper($this_user);

        my $optarg = "";
        #
        # For elabinelab experiments; ignore reboot/eventsys_restart,
        # and force noreconfig; none of it will work or make sense. 
        #
        if ($elabinelab) {
            $optarg = "-noreconfig";
        } else {
            $optarg  = ($reboot ? "-reboot" : "");
            $optarg .= ($eventsys_restart ? " -eventsys_restart" : "");
            $optarg .= ($noswapout ? " -noswapout" : "");
            $optarg .= ($noreconfig ? " -noreconfig" : "");
        }

        if ($experiment->Swap($Experiment::EXPT_SWAPMOD, $optarg) == 0) {
            #
            # Success. Set the state back to active cause thats where it
            # started.
            #
            $experiment->SetState(EXPTSTATE_ACTIVE) == 0
                or fatal("Failed to set experiment state to " .
                         EXPTSTATE_ACTIVE());
            $estate = EXPTSTATE_ACTIVE;
        } else {
            $modifyError = $errorstat = $? >> 8;
            print STDOUT "Modify Error: tbswap update failed.\n";

            #
            # tbswap either restored the experiment to the way it was,
            # or it swapped it out completely. In either case, it has
            # also restored the virtual state. 
            # 
            # Icky. Magic return code that says tbswap swapped it out.
            # We do not want tbswap to muck with states anymore, so
            # need to know what it did. At some point we should clean
            # up the exit reporting! Anyway, fatal() needs to know the
            # the right state to go back to (no longer ACTIVE).
            #
            if ($errorstat & 0x40) {
                $estate = EXPTSTATE_SWAPPED;
                $termswapstate = EXPTSTATE_SWAPPED;
                $modifySwapped = 1;
                # Old accounting info.
                $experiment->SetSwapTime();
                tbreport(SEV_SECONDARY, 'update_aborted', 'swapped_out');
                $modifyError = "Update aborted; experiment swapped out.";
            } else {
                if ($noswapout) {
                    tbreport(SEV_SECONDARY, 'update_aborted','still active');
                    $modifyError = "Update aborted; still swapped in.";
                } else {
                    tbreport(SEV_SECONDARY, 'update_aborted','state_restored');
                    $modifyError = "Update aborted; old state restored.";
                }

                # Reset the swapper since the experiment is still running.
                $experiment->SetSwapper($last_swapper);
            }
        }
    }

    #
    # We need to rerender only if the NS file was changed (ran tbprerun),
    # If the swapmod succeeded, then unconditionally run the renderer. If
    # swap failed, then need to run the renderer only if we stopped one in
    # progress.
    #
    if (defined($modnsfile)) {
    system("prerender -t $pid $eid")    
        if (!defined($modifyError) || $rendering);
    }

    #
    # Swapmod failed ...
    #
    fatal($modifyError)
    if (defined($modifyError));

    #
    # Move the temporary ns file to its real name.
    #
    if (defined($modnsfile)) {
    unlink($nsfile);
    if (system("/bin/mv", "$modnsfile", "$nsfile")) {
        fatal("Could not mv $modnsfile to $nsfile");
    }
    unlink("nsfile.ns");
    if (system("/bin/cp", "$nsfile", "nsfile.ns")) {
        fatal("Could not cp $nsfile to nsfile.ns");
    }
    }

    $experiment->ClearBackupState();
    $experiment->Report($repfile, "-b");    
}
#
# Try to copy off the files for testbed information gathering.
#
$experiment->SaveLogFiles();

#
# Make a copy of the work dir in the user visible space so the user
# can see the log files. This overwrites existing files of course,
# but thats okay.
#
$experiment->CopyLogFiles();

    # And tell the archive library to add the experiment directory.
    libArchive::TBExperimentArchiveAddUserFiles($pid, $eid) == 0
    or fatal("Failed to add user archive files to the archive!");

    #
    # The archive gets different treatment when doing a swapmod.
    #
    if ($inout eq "modify") {
    print "Doing a commit on the previous experiment archive ...\n";
    libArchive::TBExperimentArchiveSwapModCommit($pid, $eid,
                        $estate eq EXPTSTATE_SWAPPED)
        == 0 or fatal({type => 'secondary', severity => SEV_SECONDARY,
               error => ['archive_op_failed', 'commit',
                     undef, undef]},
              "Failed to commit experiment archive!");
    }

    #
    # Do a SavePoint on the experiment files. For both of these archive
    print "Doing a savepoint on the experiment archive ...\n";
    if (libArchive::TBExperimentArchiveSavePoint($pid, $eid, $tag) < 0) {
    fatal({type => 'secondary', severity => SEV_SECONDARY,
           error => ['archive_op_failed', 'savepoint', undef, undef]},
          "Failed to do a savepoint on the experiment archive!");
    }

    # Commit the archive after swapout
    if ($inout eq "out") {
        print "Doing a commit on the experiment archive ...\n";
    libArchive::TBCommitExperimentArchive($pid, $eid, $tag) == 0 or
        fatal({type => 'secondary', severity => SEV_SECONDARY,
           error => ['archive_op_failed', 'commit', undef, undef]},
          "Failed to commit experiment archive!");
    }

#
# Gather stats. 
#
if ($inout eq "in") {
    $experiment->PostSwap($this_user, TBDB_STATS_SWAPIN) == 0 or
    fatal("PostSwap failed!");
}
elsif ($inout eq "out") {
    $experiment->PostSwap($this_user, TBDB_STATS_SWAPOUT,
              ($idleswap ? TBDB_STATS_FLAGS_IDLESWAP() :0)) == 0 or
    fatal("PostSwap failed!");
}
elsif ($inout eq "modify") {
    $experiment->PostSwap($this_user, TBDB_STATS_SWAPMODIFY) == 0 or
    fatal("PostSwap failed!");
}

# Accounting info. For swapout, must be after its done with.
$experiment->SetSwapInfo($this_user);

#
# Clear the log file so the web page stops spewing. 
#
$experiment->CloseLogFile()
    if (defined($logfile));

#
# Must unlock before exit.
#
$experiment->Unlock();

#
# Since the swap completed, clear the cancel flag. This must be done
# after we change the experiment state (above). 
#
$experiment->SetCancelFlag(EXPTCANCEL_CLEAR);

my $extraMessage = "";
print "Swap Success!    $extraMessage\n";

#
# Send email notification to user.
#
my $message =
    "Experiment $eid in project $pid has been ";

if ($inout eq "out" && ($idleswap || $autoswap || $force) ) {
    $message .= "forcibly swapped out by\nEmulab";
    if ($idleswap) {
    $message .= " because it was idle for too long (Idle-Swap).\n".
      "(See also the Idle-Swap info in \n".
      "$TBDOCBASE/docwrapper.php?docname=swapping.html )\n";
    } elsif ($autoswap) {
    $message .= " because it exceeded its Maximum Duration.\n".
      "(See also the Max. Duration info in \n".
      "$TBDOCBASE/docwrapper.php?docname=swapping.html )\n";
    } elsif ($force) {
    $message .= ". (See also our Node Usage Policies in \n".
      "$TBDOCBASE/docwrapper.php?docname=swapping.html )\n";
    }
}
else {
    $message .= "$action.\n";
}

if ($inout eq "in") {
    # Add the swap settings...
    $message .="\nCurrent swap settings:\n$swapsettings";
}

$message .=
    "\n".
    "Appended below is the output. If you have any questions or comments,\n" .
    "please include the output in your message to $TBOPS\n";

SENDMAIL(($noemail ? $TBLOGS : "$user_name <$user_email>") ,
     "Experiment $pid/$eid \u$action",
     $message,
     $TBOPS,
     ($noemail ? ""
      : "Cc:  $expt_head_name <$expt_head_email>\n".
        "Bcc: $TBLOGS"),
     (($inout eq "restart") ? ($logname) :
      (($repfile, $logname), (defined($nsfile) ? ($nsfile) : ()))));

exit(0);

